<?xml version="1.0" encoding="UTF-8"
?>
<!DOCTYPE language
>
<!-- Largely inspired from Python syntax highlightning v0.9 by Per Wigren
-->
<language name="Metil++" version="1.22" kateversion="2.1" section="Scripts" extensions="*.met" mimetype="text/x-metil" casesensitive="1" author="Hugo LECLERC" license="">
  <highlighting>
    <list name="prep">
        <item> import </item>
        <item> include </item>
        <item> exec </item>
    </list>
    <list name="statements">
      <item> with_base_size_and_alignement </item>
      <item> get_value_prop </item>
      <item> label </item>
      <item> catch </item>
      <item> assert </item>
      <item> const </item>
      <item> abstract </item>
      <item> or_else </item>
      <item> static </item>
      <item> property </item>
      <item> interact </item>
      <item> delete </item>
      <item> ref </item>
      <item> virtual </item>
      <item> partial_instanciation </item>
      <item> info </item>
      <item> infon </item>
      <item> and </item>
      <item> xor </item>
      <item> is_a </item>
      <item> break </item>
      <item> break_n </item>
      <item> class </item>
      <item> transient </item>
      <item> continue </item>
      <item> continue_n </item>
      <item> def </item>
      <item> pdef </item>
      <item> else </item>
      <item> except </item>
      <item> for </item>
      <item> for_ws </item>
      <item> global </item>
      <item> if </item>
      <item> if_ws </item>
      <item> in </item>
      <item> is </item>
      <item> lambda </item>
      <item> not </item>
      <item> or </item>
      <item> pass </item>
      <item> print </item>
      <item> throw </item>
      <item> return </item>
      <item> return_n </item>
      <item> try </item>
      <item> while </item>
      <item> while_ws </item>
      <item> when </item>
      <item> inherits </item>
      <item> pertinence </item>
      <item> calc_attr </item>
      <item> new </item>
    </list>
    <list name="builtinfuncs">
      <item> reinterpret_cast </item>
      <item> Vec </item>
      <item> VecRef </item>
      <item> Char </item>
      <item> String </item>
      <item> StringRef </item>
      <item> Tuple </item>
      <item> Block </item>
      <item> Type </item>
      <item> File </item>
      <item> None </item>
      <item> Ref </item>
      <item> Def </item>
      <item> String </item>
      <item> Number </item>
      <item> Unit </item>
      <item> Bool </item>
      <item> Void </item>
      <item> Float64 </item>
      <item> Float32 </item>
      <item> Float96 </item>
      <item> Int8 </item>
      <item> Unsigned8 </item>
      <item> Int16 </item>
      <item> Unsigned16 </item>
      <item> Int32 </item>
      <item> Unsigned32 </item>
      <item> Int64 </item>
      <item> Unsigned64 </item>
      <item> ResultOfAssignement </item>
      <item> ResultOfVoidFunction </item>
      <item> ResultOfBlock </item>
      <item> Property </item>
      <item> Error </item>
      <item> ReturnException </item>
      <item> BreakException </item>
      <item> ContinueException </item>
    </list>
    <list name="specialvars">
        <item> this </item>
        <item> self </item>
        <item> none </item>
        <item> true </item>
        <item> false </item>
    </list>
    <contexts>
      <context name="Normal" attribute="Normal Text" lineEndContext="#stay">
        <keyword attribute="Preprocessor" String="prep" context="#stay"/>
        <keyword attribute="Keyword" String="statements" context="#stay"/>
        <keyword attribute="Builtin Function" String="builtinfuncs" context="#stay"/>
        <keyword attribute="Special Variable" String="specialvars" context="#stay"/>
        <RegExpr attribute="Normal" String="[a-zA-Z_][a-zA-Z_0-9]+" context="#stay"/>
        <RegExpr attribute="ComplexNumber" String="((([0-9]+(\.[0-9]+)?)([eE]-?[0-9]+)?)[+-])?(([0-9]+(\.[0-9]+)?)([eE]-?[0-9]+)?)i" context="#stay"/>
        <RegExpr attribute="Number" String="([0-9]+(\.[0-9]+)?)([eE]-?[0-9]+)?([a-z])*(_[0-9]+)?" context="#stay"/>
        <StringDetect attribute="Operator" String="&lt;&lt;&lt;&lt;" context="Begin Long String"/>
        <DetectChar attribute="Ccode" char="`" context="Ccode"/>
        <RegExpr attribute="Raw String" String="[rR]&quot;" context="Raw String"/>
        <DetectChar attribute="String" char="&quot;" context="Single String"/>
        <RegExpr attribute="Comment" String="#[#~]" context="PartialComment"/>
        <RegExpr attribute="Comment" String="#.*$" context="#stay"/>
        <RegExpr attribute="Operator" String="[+*/\(\)%\|\[\]\{\}:=;\!&lt;&gt;!^&amp;~-]" context="#stay"/>
      </context>
      
      <context name="Single String" attribute="String" lineEndContext="#stay">
          <HlCStringChar attribute="String" context="#stay"/>
          <Detect2Chars attribute="OperatorInString" char="$" char1="(" context="OperatorInString"/>
          <RegExpr attribute="OperatorInString" String="\&#036;[\_a-zA-Z][\_a-zA-Z0-9]*" context="#stay"/>
          <DetectChar attribute="String" char="&quot;" context="#pop"/>
      </context>
      
      <!--  for i in (1 .. 17).reversed print "<RegExpr String='^$("\s"*i)\S' context='Long String $i'/>"  -->
      <context name="Begin Long String" attribute="Long String" lineEndContext="#stay">
          <RegExpr String='^\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s' context='Long String 16'/>
          <RegExpr String='^\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s' context='Long String 15'/>
          <RegExpr String='^\s\s\s\s\s\s\s\s\s\s\s\s\s\s' context='Long String 14'/>
          <RegExpr String='^\s\s\s\s\s\s\s\s\s\s\s\s\s' context='Long String 13'/>
          <RegExpr String='^\s\s\s\s\s\s\s\s\s\s\s\s' context='Long String 12'/>
          <RegExpr String='^\s\s\s\s\s\s\s\s\s\s\s' context='Long String 11'/>
          <RegExpr String='^\s\s\s\s\s\s\s\s\s\s' context='Long String 10'/>
          <RegExpr String='^\s\s\s\s\s\s\s\s\s' context='Long String 9'/>
          <RegExpr String='^\s\s\s\s\s\s\s\s' context='Long String 8'/>
          <RegExpr String='^\s\s\s\s\s\s\s' context='Long String 7'/>
          <RegExpr String='^\s\s\s\s\s\s' context='Long String 6'/>
          <RegExpr String='^\s\s\s\s\s' context='Long String 5'/>
          <RegExpr String='^\s\s\s\s' context='Long String 4'/>
          <RegExpr String='^\s\s\s' context='Long String 3'/>
          <RegExpr String='^\s\s' context='Long String 2'/>
          <RegExpr String='^\s' context='Long String 1'/>
          <RegExpr String='^' context='#pop'/>
      </context>
      <!--
for i in 1 .. 17
    stdout <<<<
        <context name="Long String $i" attribute="Ccode" lineEndContext="#stay">
            <Detect2Chars attribute="OperatorInString" char="$" char1="(" context="OperatorInString"/>
            <RegExpr attribute="OperatorInString" String="\&#036;[\_a-zA-Z][\_a-zA-Z0-9]*" context="#stay"/>
            <RegExpr String="^$("\\s"*i)" context="#stay"/>
            <RegExpr String="^" context="#pop#pop"/>
            <RegExpr String="^." context="#pop#pop"/>
        </context>

      -->
        <context name="Long String 1" attribute="Ccode" lineEndContext="#stay">
            <Detect2Chars attribute="OperatorInString" char="$" char1="(" context="OperatorInString"/>
            <RegExpr attribute="OperatorInString" String="\&#036;[\_a-zA-Z][\_a-zA-Z0-9]*" context="#stay"/>
            <RegExpr String="^\s" context="#stay"/>
            <RegExpr String="^" context="#pop#pop"/>
            <RegExpr String="^." context="#pop#pop"/>
        </context>
        
        <context name="Long String 2" attribute="Ccode" lineEndContext="#stay">
            <Detect2Chars attribute="OperatorInString" char="$" char1="(" context="OperatorInString"/>
            <RegExpr attribute="OperatorInString" String="\&#036;[\_a-zA-Z][\_a-zA-Z0-9]*" context="#stay"/>
            <RegExpr String="^\s\s" context="#stay"/>
            <RegExpr String="^" context="#pop#pop"/>
            <RegExpr String="^." context="#pop#pop"/>
        </context>
        
        <context name="Long String 3" attribute="Ccode" lineEndContext="#stay">
            <Detect2Chars attribute="OperatorInString" char="$" char1="(" context="OperatorInString"/>
            <RegExpr attribute="OperatorInString" String="\&#036;[\_a-zA-Z][\_a-zA-Z0-9]*" context="#stay"/>
            <RegExpr String="^\s\s\s" context="#stay"/>
            <RegExpr String="^" context="#pop#pop"/>
            <RegExpr String="^." context="#pop#pop"/>
        </context>
        
        <context name="Long String 4" attribute="Ccode" lineEndContext="#stay">
            <Detect2Chars attribute="OperatorInString" char="$" char1="(" context="OperatorInString"/>
            <RegExpr attribute="OperatorInString" String="\&#036;[\_a-zA-Z][\_a-zA-Z0-9]*" context="#stay"/>
            <RegExpr String="^\s\s\s\s" context="#stay"/>
            <RegExpr String="^" context="#pop#pop"/>
            <RegExpr String="^." context="#pop#pop"/>
        </context>
        
        <context name="Long String 5" attribute="Ccode" lineEndContext="#stay">
            <Detect2Chars attribute="OperatorInString" char="$" char1="(" context="OperatorInString"/>
            <RegExpr attribute="OperatorInString" String="\&#036;[\_a-zA-Z][\_a-zA-Z0-9]*" context="#stay"/>
            <RegExpr String="^\s\s\s\s\s" context="#stay"/>
            <RegExpr String="^" context="#pop#pop"/>
            <RegExpr String="^." context="#pop#pop"/>
        </context>
        
        <context name="Long String 6" attribute="Ccode" lineEndContext="#stay">
            <Detect2Chars attribute="OperatorInString" char="$" char1="(" context="OperatorInString"/>
            <RegExpr attribute="OperatorInString" String="\&#036;[\_a-zA-Z][\_a-zA-Z0-9]*" context="#stay"/>
            <RegExpr String="^\s\s\s\s\s\s" context="#stay"/>
            <RegExpr String="^" context="#pop#pop"/>
            <RegExpr String="^." context="#pop#pop"/>
        </context>
        
        <context name="Long String 7" attribute="Ccode" lineEndContext="#stay">
            <Detect2Chars attribute="OperatorInString" char="$" char1="(" context="OperatorInString"/>
            <RegExpr attribute="OperatorInString" String="\&#036;[\_a-zA-Z][\_a-zA-Z0-9]*" context="#stay"/>
            <RegExpr String="^\s\s\s\s\s\s\s" context="#stay"/>
            <RegExpr String="^" context="#pop#pop"/>
            <RegExpr String="^." context="#pop#pop"/>
        </context>
        
        <context name="Long String 8" attribute="Ccode" lineEndContext="#stay">
            <Detect2Chars attribute="OperatorInString" char="$" char1="(" context="OperatorInString"/>
            <RegExpr attribute="OperatorInString" String="\&#036;[\_a-zA-Z][\_a-zA-Z0-9]*" context="#stay"/>
            <RegExpr String="^\s\s\s\s\s\s\s\s" context="#stay"/>
            <RegExpr String="^" context="#pop#pop"/>
            <RegExpr String="^." context="#pop#pop"/>
        </context>
        
        <context name="Long String 9" attribute="Ccode" lineEndContext="#stay">
            <Detect2Chars attribute="OperatorInString" char="$" char1="(" context="OperatorInString"/>
            <RegExpr attribute="OperatorInString" String="\&#036;[\_a-zA-Z][\_a-zA-Z0-9]*" context="#stay"/>
            <RegExpr String="^\s\s\s\s\s\s\s\s\s" context="#stay"/>
            <RegExpr String="^" context="#pop#pop"/>
            <RegExpr String="^." context="#pop#pop"/>
        </context>
        
        <context name="Long String 10" attribute="Ccode" lineEndContext="#stay">
            <Detect2Chars attribute="OperatorInString" char="$" char1="(" context="OperatorInString"/>
            <RegExpr attribute="OperatorInString" String="\&#036;[\_a-zA-Z][\_a-zA-Z0-9]*" context="#stay"/>
            <RegExpr String="^\s\s\s\s\s\s\s\s\s\s" context="#stay"/>
            <RegExpr String="^" context="#pop#pop"/>
            <RegExpr String="^." context="#pop#pop"/>
        </context>
        
        <context name="Long String 11" attribute="Ccode" lineEndContext="#stay">
            <Detect2Chars attribute="OperatorInString" char="$" char1="(" context="OperatorInString"/>
            <RegExpr attribute="OperatorInString" String="\&#036;[\_a-zA-Z][\_a-zA-Z0-9]*" context="#stay"/>
            <RegExpr String="^\s\s\s\s\s\s\s\s\s\s\s" context="#stay"/>
            <RegExpr String="^" context="#pop#pop"/>
            <RegExpr String="^." context="#pop#pop"/>
        </context>
        
        <context name="Long String 12" attribute="Ccode" lineEndContext="#stay">
            <Detect2Chars attribute="OperatorInString" char="$" char1="(" context="OperatorInString"/>
            <RegExpr attribute="OperatorInString" String="\&#036;[\_a-zA-Z][\_a-zA-Z0-9]*" context="#stay"/>
            <RegExpr String="^\s\s\s\s\s\s\s\s\s\s\s\s" context="#stay"/>
            <RegExpr String="^" context="#pop#pop"/>
            <RegExpr String="^." context="#pop#pop"/>
        </context>
        
        <context name="Long String 13" attribute="Ccode" lineEndContext="#stay">
            <Detect2Chars attribute="OperatorInString" char="$" char1="(" context="OperatorInString"/>
            <RegExpr attribute="OperatorInString" String="\&#036;[\_a-zA-Z][\_a-zA-Z0-9]*" context="#stay"/>
            <RegExpr String="^\s\s\s\s\s\s\s\s\s\s\s\s\s" context="#stay"/>
            <RegExpr String="^" context="#pop#pop"/>
            <RegExpr String="^." context="#pop#pop"/>
        </context>
        
        <context name="Long String 14" attribute="Ccode" lineEndContext="#stay">
            <Detect2Chars attribute="OperatorInString" char="$" char1="(" context="OperatorInString"/>
            <RegExpr attribute="OperatorInString" String="\&#036;[\_a-zA-Z][\_a-zA-Z0-9]*" context="#stay"/>
            <RegExpr String="^\s\s\s\s\s\s\s\s\s\s\s\s\s\s" context="#stay"/>
            <RegExpr String="^" context="#pop#pop"/>
            <RegExpr String="^." context="#pop#pop"/>
        </context>
        
        <context name="Long String 15" attribute="Ccode" lineEndContext="#stay">
            <Detect2Chars attribute="OperatorInString" char="$" char1="(" context="OperatorInString"/>
            <RegExpr attribute="OperatorInString" String="\&#036;[\_a-zA-Z][\_a-zA-Z0-9]*" context="#stay"/>
            <RegExpr String="^\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s" context="#stay"/>
            <RegExpr String="^" context="#pop#pop"/>
            <RegExpr String="^." context="#pop#pop"/>
        </context>
        
        <context name="Long String 16" attribute="Ccode" lineEndContext="#stay">
            <Detect2Chars attribute="OperatorInString" char="$" char1="(" context="OperatorInString"/>
            <RegExpr attribute="OperatorInString" String="\&#036;[\_a-zA-Z][\_a-zA-Z0-9]*" context="#stay"/>
            <RegExpr String="^\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s" context="#stay"/>
            <RegExpr String="^" context="#pop#pop"/>
            <RegExpr String="^." context="#pop#pop"/>
        </context>
     
            
      <context name="Ccode" attribute="Ccode" lineEndContext="#stay">
        <HlCStringChar attribute="String" context="#stay"/>
        <DetectChar attribute="Ccode" char="`" context="#pop"/>
      </context>
      
      <context name="OperatorInString" attribute="OperatorInString" lineEndContext="#stay">
        <DetectChar attribute="OperatorInString" char="(" context="OperatorInString"/>
        <DetectChar attribute="OperatorInString" char=")" context="#pop"/>
      </context>
      
      <context name="Raw String" attribute="Raw String" lineEndContext="#stay">
        <HlCStringChar attribute="Raw String" context="#stay"/>
        <DetectChar attribute="Raw String" char="&quot;" context="#pop"/>
      </context>
      <context name="PartialComment" attribute="Comment" lineEndContext="#stay">
        <Detect2Chars attribute="Comment" char="~" char1="#" context="#pop"/>
        <Detect2Chars attribute="Comment" char="#" char1="#" context="#pop"/>
      </context>
    </contexts>
    <itemDatas>
      <itemData name="Normal Text" defStyleNum="dsNormal"/>
      <itemData name="Operator" defStyleNum="dsChar"/>
      <itemData name="Keyword" defStyleNum="dsKeyword"/>
      <itemData name="Builtin Function" defStyleNum="dsDataType"/>
      <itemData name="Special Variable" defStyleNum="dsOthers"/>
      <itemData name="Preprocessor" defStyleNum="dsChar"/>
      <itemData name="Number" defStyleNum="dsFloat"/>
      <itemData name="ComplexNumber" defStyleNum="dsFloat"/>
      <itemData name="Error" defStyleNum="dsNormal" bold="1"/>
      <itemData name="Ccode" defStyleNum="dsDataType" italic="1"/>
      <itemData name="Comment" defStyleNum="dsComment"/>
      <itemData name="String" defStyleNum="dsString"/>
      <itemData name="Long String" defStyleNum="dsString"/>
      <itemData name="OperatorInString" defStyleNum="dsString" italic="1"/>
      <itemData name="Raw String" defStyleNum="dsString"/>
    </itemDatas>
  </highlighting>
  <general>
    <folding indentationsensitive="1" />
    <comments>
      <comment name="singleLine" start="# " position="afterwhitespace"/>
      <comment name="multiLine" start="#~" end="~#"/>
    </comments>
    <keywords casesensitive="1" />
  </general>
</language>
