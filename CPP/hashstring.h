#ifndef HASHSTRING_H
#define HASHSTRING_H
inline unsigned hashstring( const char *s, unsigned si ) {
    switch ( si ) {
      case 1: return s[0]*83;
      case 2: return s[0]*83+s[1]*263;
      case 3: return s[0]*83+s[1]*263+s[2]*151;
      case 4: return s[0]*83+s[1]*263+s[2]*151+s[3]*199;
      case 5: return s[0]*83+s[1]*263+s[2]*151+s[3]*199+s[4]*619;
      case 6: return s[0]*83+s[1]*263+s[2]*151+s[3]*199+s[4]*619+s[5]*311;
      case 7: return s[0]*83+s[1]*263+s[2]*151+s[3]*199+s[4]*619+s[5]*311+s[6]*347;
      case 8: return s[0]*83+s[1]*263+s[2]*151+s[3]*199+s[4]*619+s[5]*311+s[6]*347+s[7]*19;
      case 9: return s[0]*83+s[1]*263+s[2]*151+s[3]*199+s[4]*619+s[5]*311+s[6]*347+s[7]*19+s[8]*601;
      case 10: return s[0]*83+s[1]*263+s[2]*151+s[3]*199+s[4]*619+s[5]*311+s[6]*347+s[7]*19+s[8]*601+s[9]*43;
      case 11: return s[0]*83+s[1]*263+s[2]*151+s[3]*199+s[4]*619+s[5]*311+s[6]*347+s[7]*19+s[8]*601+s[9]*43+s[10]*239;
      case 12: return s[0]*83+s[1]*263+s[2]*151+s[3]*199+s[4]*619+s[5]*311+s[6]*347+s[7]*19+s[8]*601+s[9]*43+s[10]*239+s[11]*523;
      case 13: return s[0]*83+s[1]*263+s[2]*151+s[3]*199+s[4]*619+s[5]*311+s[6]*347+s[7]*19+s[8]*601+s[9]*43+s[10]*239+s[11]*523+s[12]*463;
      case 14: return s[0]*83+s[1]*263+s[2]*151+s[3]*199+s[4]*619+s[5]*311+s[6]*347+s[7]*19+s[8]*601+s[9]*43+s[10]*239+s[11]*523+s[12]*463+s[13]*599;
      case 15: return s[0]*83+s[1]*263+s[2]*151+s[3]*199+s[4]*619+s[5]*311+s[6]*347+s[7]*19+s[8]*601+s[9]*43+s[10]*239+s[11]*523+s[12]*463+s[13]*599+s[14]*223;
      case 16: return s[0]*83+s[1]*263+s[2]*151+s[3]*199+s[4]*619+s[5]*311+s[6]*347+s[7]*19+s[8]*601+s[9]*43+s[10]*239+s[11]*523+s[12]*463+s[13]*599+s[14]*223+s[15]*29;
      default: {
          static const unsigned m[] = { 83,263,151,199,619,311,347,19,601,43,239,523,463,599,223,29 };
          unsigned res = 0;
          for(unsigned i=0;i<si;++i) res += s[i] * m[i % 16];
          return res;
      }
    }
}
#endif // HASHSTRING_H
