
#~
  sigma from epsilon for an isotropic elastic material
~#
def sigma_hooke_iso( eps, young, poisson, type_stress_2D = "plane stress" )
    dim := eps.nb_rows
    Id := Mat[ Op, Gen[dim,dim] ]( function = x => x[0] == x[1] )
    if dim == 3
        return young / ( 1 + poisson ) * ( eps + poisson / ( 1 - 2 * poisson ) * trace( eps ) * Id )
    if dim == 2
        if type_stress_2D == "plane stress"
            return young / ( 1 + poisson ) * ( eps + poisson / ( 1 - poisson ) * trace( eps ) * Id )
        if type_stress_2D == "plane strain"
            return young / ( 1 + poisson ) * ( eps + poisson / ( 1 - 2 * poisson ) * trace( eps ) * Id )
        assert( 0, "Unknown type stress $type_stress_2D" )
    if dim == 1
        return young * eps

#~
  epsilon from sigma for an isotropic elastic material
~#
def eps_hooke_iso( sigma, young, poisson, type_stress_2D = "plane stress" )
    dim := sigma.nb_rows
    Id := Mat[ Op, Gen[dim,dim] ]( function = x => x[0] == x[1] )
    if dim == 3
        return ( 1 + poisson ) / young * sigma - poisson / young  * trace( sigma ) * Id
    if dim == 2
        if type_stress_2D == "plane stress"
            return ( 1 + poisson ) / young * sigma - poisson / young  * trace( sigma ) * Id
        if type_stress_2D == "plane strain"
            return ( 1 + poisson ) / young * sigma - ( 1 + poisson ) * poisson / young  * trace( sigma ) * Id
        assert( 0, "Unknown type stress $type_stress_2D" )
    if dim == 1
        return 1 / young * sigma

#~
  sigma from epsilon for an isotropic elastic material
~#
def hooke_iso( E, nu, dim = 3, type_stress_2D = "plane stress" )
    H := Tensor[ Op, [dim,dim,dim,dim] ]( function = x => 0 )
    if dim == 1
        H[0,0,0,0] = E
    else
        e := Mat[ Op, Gen[dim,dim] ]( function = x => symbol("e_{$(x)}") )
        s := sigma_hooke_iso( e, E, nu, type_stress_2D )
        # -> sigma.diff( epsilon )
        for ind_s, val_s in s
            for ind_e, val_e in e
                H[ ind_s +++ ind_e ] = val_s.diff(val_e)
    return H

#~
  deviatoric part of sigma
~#
def dev( sigma ) when sigma.is_a_matrix pertinence 10
    dim := sigma.nb_rows
    Id := Mat[ Op, Gen[dim,dim] ]( function = x => x[0] == x[1] )
    return sigma - Id * trace( sigma ) / trace( Id )

#~
  Von Mises' equivalent stress
~#
def von_mises( sigma ) when sigma.is_a_matrix pertinence 10
    dim := sigma.nb_rows
    d := dev( sigma )
    if dim == 3
        return sqrt( 3 / 2 * d : d )
    if dim == 2
        return sqrt( 2 * d : d )
    if dim == 1
        return sqrt( d : d )

#~
  lame coeff lambda for an isotropic elastic material
~#
def lame_coeff_lambda( young, poisson, dim = 3, type_stress_2D = "plane stress" )
    if dim == 3
        return young * poisson / ( ( 1 - 2 * poisson ) * ( 1 + poisson ) )
    if dim == 2
        if type_stress_2D == "plane stress"
            return young * poisson / ( ( 1 - poisson ) * ( 1 + poisson ) )
        if type_stress_2D == "plane strain"
            return young * poisson / ( ( 1 - 2 * poisson ) * ( 1 + poisson ) )
        assert( 0, "Unknown type stress $type_stress_2D" )
    if dim == 1
        return young * poisson / ( 1 + poisson )

#~
  lame coeff mu for an isotropic elastic material
~#
def lame_coeff_mu( young, poisson )
    return young / ( 2 * ( 1 + poisson ) )

#~
  parameter kappa for an isotropic elastic material
~#
def parameter_kappa( poisson, dim = 2, type_stress_2D = "plane stress" )
    if dim == 2
        if type_stress_2D == "plane stress"
            return ( 3 - poisson ) / ( 1 + poisson )
        if type_stress_2D == "plane strain"
            return 3 - 4 * poisson
        assert( 0, "Unknown type stress $type_stress_2D" )
    if dim == 3
        return ( 3 - poisson ) / ( 1 + poisson )
        # assert( 0, "kappa not implemented for dim $dim" )
