import "SymbolicElement.met"

#~

~#
class InstanceParametricElement[ NE, dim, ST ] inherits ParametricElement[ NE, dim ]
    nodes := Vec[ ST, nb_nodes ]()
    
    def init( c ) when c.tensor_order == 1
        nodes.init( c )
        
    def get_vtk_num
        return NE::vtk_num
    
#~

~#
class InstanceParametricElementWithMeshPtr[ NE, dim, ST, TM ]
    static const pe       := ParametricElement[ NE, dim ]()
    static const nb_nodes := pe.nb_nodes
    static const nvi      := pe.nvi # nb interpolation variables
    static const T        := TM::T
    static const Pvec     := TM::Pvec
    
    inst ~= Ptr[ InstanceParametricElement[ NE, dim, ST ] ]
    mesh ~= Ptr[ TM ]

    def get_pos_nodes
        res := Vec[ Pvec, nb_nodes ]()
        for i in 0 .. nb_nodes
            res[ i ] = mesh->position->data.sub_vecs[ inst->ind[i].num_lst ]->data[ inst->ind[i].index ]
        return res
        
    def interpolation( var_inter, val_on_nodes ) return pe.interpolation( var_inter, val_on_nodes )
    def get_pos( var_inter )                     return pe.interpolation( var_inter, get_pos_nodes() )
    def get_jac_mat( var_inter )                 return pe.jac_mat( var_inter, get_pos_nodes() )
    def get_jac( var_inter )                     return pe.jac( var_inter, get_pos_nodes() )
    def get_normal( var_inter )                  return pe.normal( var_inter, get_pos_nodes() )
    def get_measure( var_inter )                 return pe.measure( var_inter, get_pos_nodes() )
    def get_inv_jac_mat( var_inter )             return pe.inv_jac_mat( var_inter, get_pos_nodes() )
    def get_center_of_var_inter                  return pe.center_of_var_inter # Ex : Bar -> [1/2]; Triangle -> [1/3 1/3]; ...
    
