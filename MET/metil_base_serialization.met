
#~  ~#
class RawDataWriter
    property is_a_RawData
    data := SplittedVec[ Int8, 1024 ]()
    
    def write_aligned( pa, n )
        a := ref @pa
        s := ( ( size_of( a ) * n + 31 ) // 32 ) * 4
        p := data.check_contiguous_room( s, s )
        memcpy( p.ptr, (&a).ptr, size_of_if_in_vec( a ), get_value_prop n )
        # for valgrind
        for i in ( size_of_if_in_vec( a ) * n ) // 8 .. s
            Ptr[Int8]( p.ptr )[i] = 0
        return p
    
    def write_aligned( pa, n ) when is_of_type_UntypedPtr( pa )
        s := ceil( n, 4 )
        p := data.check_contiguous_room( s, s )
        memcpy( p.ptr, pa, 8, s )
        return p

    def write_aligned( val ) #
        return write_aligned( &val, 1 )
        
#~
Ex :
    class A
        b := Ptr[Int32]() # points to 2 contiguous values
        c := Ptr[Int32]() # points to only 1 value
        def get_pointer_attributes
            return [ (b,2), (c,1) ]
~#
def get_pointer_attributes( self )
    res := VarArgs()
    for num_attribute in 0 .. self.nb_attributes()
        attr := ref self.attribute_nb( num_attribute )
        if attr.is_a_pointer
            T := attr.T
            res.push_unnamed( ( attr, 1 ) )
    return res
    
#~
~#
class IntervalSet[ T ]
    class Interval[ T ]
        b := T()
        e := T()
        def func_rm_if( i )
            if b >= i.b and b <= i.e
                b = i.b
                e = max( e, i.e )
                return true
            if e >= i.b and e <= i.e
                b = min( b, i.b )
                e = i.e
                return true
            return false
        def get_size
            return e - b
            
    static const TI := Interval[ T ]
    
    data := SplittedVec[Interval[ T ],32]()
             
    def append( b, e )
        ec := Interval[T]( b = b, e = e )
        data.remove_unordered_if( ec.func_rm_if )
        data.push_back( b = ec.b, e = ec.e )

    def get_size
        return data.size
    
    def __for__( block )
        for d in data
            block( d )
    
    def write_to_stream( stream )
        for d in data
            stream << "[$(d.b);$(d.e)] "

#~
    Binary serializer -> transform a set of object and them pointed data to binary data, which can be (saved and) read using BinDeSerializer

    
~#
class BinSerializer
    ip := IntervalSet[UntypedPtr]() # interval pointers
    va := VarArgs()
    
    def append( a )
        va.push_unnamed( a )
        append_pointed_data_( &a, 1 )
        return self
    
    def append_pointed_data_( p, n )
        if p->type == Definition
            a ~= @p
            for num_temp_arg in 0 .. nb_template_parameters_of( a )
                append_pointed_data_( &template_parameter_nb_of( a, num_temp_arg ), 1 )
        else
            # append ptr in intervals
            ip.append( p, p + n )
            
            # look recursively for pointed data
            for a, s in p->pointer_attributes
                append_pointed_data_( a, s )
                for i in 1 .. n
                    np := Ptr[a.T]( UntypedPtr( p + i ) + ( UntypedPtr( &a ) - UntypedPtr( p ) ) )
                    append_pointed_data_( np, s )

    def append_type_( rd, T )
        pass
        
    def make_rd_( limit )
        rd := RawDataWriter() # 
        # offset to pointer intervals
        offset_to_ip := rd.write_aligned( 0 ) # 
        
        # data
        for a in va
            append_type_()
            # type
            ts := type_of( a ).base_name()
            rd.write_aligned( ts.size )
            rd.write_aligned( ts.ptr, ts.size )
            # template arguments
            nt := nb_template_parameters_of( a )
            rd.write_aligned( nt )
            for num_temp_arg in 0 .. nt
                append( template_parameter_nb_of( a, num_temp_arg ) )
            # data (as a pointer)
            rd.write_aligned( p )
        # no more types and pointers
        rd.write_aligned( 0 )
        
        # pointer data
        rd.write_aligned( limit ) # 
        e := ip.size
        rd.write_aligned( e ) # nb pointers
        for inter in ip
            rd.write_aligned( inter ) # beg, end
        # data if size < limit
        for inter in ip
            if inter.size < limit
                rd.write_aligned( inter.b, inter.size ) # pointed values
        
        
                
        return rd

    def write_to_stream( stream )
        limit := 256
        rd := make_rd_( limit )
        rd.data.stream_copy_to( stream )
        for inter in ip
            if inter.size >= limit
                stream.write( inter.b, inter.size ) # pointed values


#~

~#
class RawDataReader
    property is_a_RawDataReader
    data := ""
    pos  := SizeType( 0 )
    
    def read_aligned( T )
        res := Ptr[T]( data.data_ + pos )
        pos += ( ( size_of( partial_instanciation T ) + 31 ) // 32 ) * 4
        return res
    
    def read_aligned( T, n )
        res := Ptr[T]( data.data_ + pos )
        pos += ( ( size_of( partial_instanciation T ) * n + 31 ) // 32 ) * 4
        return res
        
    def get_ptr
        return data.data_

    def get_size
        return data.size

#~ 
    Read data from BinSerializer

Ex: 
    BinSerializer().append( Float32(10.5) ).write_to( File( "ess", "w" ) )
    for o in BinDeSerializer( File( "ess", "r" ) ) info o.type, o

~#
class BinDeSerializer
    raw_data := RawDataReader()
    already_rellocated := Set[UntypedPtr]()
    
    def init( stream )
        already_rellocated.init()
        raw_data.init( data = stream.read() )
        if raw_data.size
            rellocation()
    
    def rellocation
        raw_data.pos = 0
        while read_type_and_ptr()
            pass
        # get pointer info
        nb_pointers := raw_data.read_aligned( Int32 )
        ip := raw_data.read_aligned( IntervalSet[ UntypedPtr ]::TI, @nb_pointers )
        beg_pointers := raw_data.get_ptr() + raw_data.pos
        # run through data to find pointers
        raw_data.pos = 0
        while true
            dp := read_type_and_ptr()
            if not dp
                break
            rellocate_ptr_rec( @dp, beg_pointers, nb_pointers, ip )
    
    # pt is a Ptr[Object] with a value that must be changed according to ip
    def rellocate_ptr_rec( p, beg_pointers, nb_pointers, ip )
        for a, s in p.pointer_attributes # example -> ( &data_, size_ ) for a dynamically sized vector - &data => Ptr[ Ptr[Float64] ]
            if not ( UntypedPtr( a ) in already_rellocated )
                already_rellocated.insert( a )
                # find correspondance -> untyped_ptr will point to data from file
                b := beg_pointers
                for num_ptr in 0 .. @nb_pointers
                    if a >= ip[num_ptr].b and a < ip[num_ptr].e
                        a = b + ( UntypedPtr(a) - ip[num_ptr].b )
                        break
                    b += ip[num_ptr].e - ip[num_ptr].b
                
                # look recursively in pointed attributes ( e.g. data_[n] )
                for i in 0 .. s
                    rellocate_ptr_rec( a[i], beg_pointers, nb_pointers, ip )
    
    def read_type_and_ptr
        # get type
        TS_size := raw_data.read_aligned( Int32 )
        if not @TS_size
            return NULL
        TS_data := raw_data.read_aligned( Int8, @TS_size )
        TS_name := String( size = @TS_size, data = TS_data )
        TB := $TS_name
        # get template arguments
        nb_template_arguments := @raw_data.read_aligned( Int32 )
        if nb_template_arguments
            template_arguments    := VarArgs()
            for num_temp_arg in 0 .. nb_template_arguments
                template_arguments.push_unnamed( @(@read_type_and_ptr()) )
            # get data
            TF := call_select( TB, template_arguments )
            info TF
            return raw_data.read_aligned( Ptr[TF] )
        return raw_data.read_aligned( Ptr[TB] )
        

    def __for__( block )
        if raw_data.size
            raw_data.pos = 0
            while true
                p := read_type_and_ptr()
                if not p
                    break
                block( @(@p) )

