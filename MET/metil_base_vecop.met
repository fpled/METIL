def sub( a ) when a.is_a_vector  return VecOp( sub, a )
def sub( a ) when a.is_an_array  return ArrayOp( sub, a )
def sub( a ) when a.is_a_matrix  return MatOp( sub, a )
def sub( a ) when __is_a_Property__(a)  pertinence 9  toto := a; return sub( toto )

def exp( a ) when a.is_a_vector  return VecOp( exp, a )
def exp( a ) when a.is_an_array  return ArrayOp( exp, a )
def exp( a ) when a.is_a_matrix  return MatOp( exp, a )
def exp( a ) when __is_a_Property__(a)  pertinence 9  toto := a; return exp( toto )

def log( a ) when a.is_a_vector  return VecOp( log, a )
def log( a ) when a.is_an_array  return ArrayOp( log, a )
def log( a ) when a.is_a_matrix  return MatOp( log, a )
def log( a ) when __is_a_Property__(a)  pertinence 9  toto := a; return log( toto )

def sin( a ) when a.is_a_vector  return VecOp( sin, a )
def sin( a ) when a.is_an_array  return ArrayOp( sin, a )
def sin( a ) when a.is_a_matrix  return MatOp( sin, a )
def sin( a ) when __is_a_Property__(a)  pertinence 9  toto := a; return sin( toto )

def cos( a ) when a.is_a_vector  return VecOp( cos, a )
def cos( a ) when a.is_an_array  return ArrayOp( cos, a )
def cos( a ) when a.is_a_matrix  return MatOp( cos, a )
def cos( a ) when __is_a_Property__(a)  pertinence 9  toto := a; return cos( toto )

def tan( a ) when a.is_a_vector  return VecOp( tan, a )
def tan( a ) when a.is_an_array  return ArrayOp( tan, a )
def tan( a ) when a.is_a_matrix  return MatOp( tan, a )
def tan( a ) when __is_a_Property__(a)  pertinence 9  toto := a; return tan( toto )

def asin( a ) when a.is_a_vector  return VecOp( asin, a )
def asin( a ) when a.is_an_array  return ArrayOp( asin, a )
def asin( a ) when a.is_a_matrix  return MatOp( asin, a )
def asin( a ) when __is_a_Property__(a)  pertinence 9  toto := a; return asin( toto )

def acos( a ) when a.is_a_vector  return VecOp( acos, a )
def acos( a ) when a.is_an_array  return ArrayOp( acos, a )
def acos( a ) when a.is_a_matrix  return MatOp( acos, a )
def acos( a ) when __is_a_Property__(a)  pertinence 9  toto := a; return acos( toto )

def atan( a ) when a.is_a_vector  return VecOp( atan, a )
def atan( a ) when a.is_an_array  return ArrayOp( atan, a )
def atan( a ) when a.is_a_matrix  return MatOp( atan, a )
def atan( a ) when __is_a_Property__(a)  pertinence 9  toto := a; return atan( toto )

def sinh( a ) when a.is_a_vector  return VecOp( sinh, a )
def sinh( a ) when a.is_an_array  return ArrayOp( sinh, a )
def sinh( a ) when a.is_a_matrix  return MatOp( sinh, a )
def sinh( a ) when __is_a_Property__(a)  pertinence 9  toto := a; return sinh( toto )

def cosh( a ) when a.is_a_vector  return VecOp( cosh, a )
def cosh( a ) when a.is_an_array  return ArrayOp( cosh, a )
def cosh( a ) when a.is_a_matrix  return MatOp( cosh, a )
def cosh( a ) when __is_a_Property__(a)  pertinence 9  toto := a; return cosh( toto )

def tanh( a ) when a.is_a_vector  return VecOp( tanh, a )
def tanh( a ) when a.is_an_array  return ArrayOp( tanh, a )
def tanh( a ) when a.is_a_matrix  return MatOp( tanh, a )
def tanh( a ) when __is_a_Property__(a)  pertinence 9  toto := a; return tanh( toto )

def heaviside( a ) when a.is_a_vector  return VecOp( heaviside, a )
def heaviside( a ) when a.is_an_array  return ArrayOp( heaviside, a )
def heaviside( a ) when a.is_a_matrix  return MatOp( heaviside, a )
def heaviside( a ) when __is_a_Property__(a)  pertinence 9  toto := a; return heaviside( toto )

def abs( a ) when a.is_a_vector  return VecOp( abs, a )
def abs( a ) when a.is_an_array  return ArrayOp( abs, a )
def abs( a ) when a.is_a_matrix  return MatOp( abs, a )
def abs( a ) when __is_a_Property__(a)  pertinence 9  toto := a; return abs( toto )

def eqz( a ) when a.is_a_vector  return VecOp( eqz, a )
def eqz( a ) when a.is_an_array  return ArrayOp( eqz, a )
def eqz( a ) when a.is_a_matrix  return MatOp( eqz, a )
def eqz( a ) when __is_a_Property__(a)  pertinence 9  toto := a; return eqz( toto )

def add( a, b ) when a.is_a_vector and b.is_a_vector  return VecOp( add, a, b )
def add( a, b ) when a.is_a_vector  return VecOp( add, a, VecCst(a.size,b) )
def add( a, b ) when b.is_a_vector  return VecOp( add, VecCst(b.size,a), b )
def add( a, b ) when a.is_an_array and b.is_an_array  return ArrayOp( add, a, b )
def add( a, b ) when a.is_an_array  return ArrayOp( add, a, ArrayCst(a.sizes,b) )
def add( a, b ) when b.is_an_array  return ArrayOp( add, ArrayCst(b.sizes,a), b )
def add( a, b ) when a.is_a_matrix and b.is_a_matrix  return MatOp( add, a, b )
def add( a, b ) when a.is_a_matrix  return MatOp( add, a, MatCst(a.sizes,b) )
def add( a, b ) when b.is_a_matrix  return MatOp( add, MatCst(b.sizes,a), b )
def add( a, b ) when __is_a_Property__(a)  pertinence 9  toto := a; return add( toto, b )
def add( a, b ) when __is_a_Property__(b)  pertinence 8  toto := b; return add( a, toto )
def add( a, b ) when are_of_different_type(a,b) pertinence 0  return op_with_ret_using_type_promote( a, b, add )

def sub( a, b ) when a.is_a_vector and b.is_a_vector  return VecOp( sub, a, b )
def sub( a, b ) when a.is_a_vector  return VecOp( sub, a, VecCst(a.size,b) )
def sub( a, b ) when b.is_a_vector  return VecOp( sub, VecCst(b.size,a), b )
def sub( a, b ) when a.is_an_array and b.is_an_array  return ArrayOp( sub, a, b )
def sub( a, b ) when a.is_an_array  return ArrayOp( sub, a, ArrayCst(a.sizes,b) )
def sub( a, b ) when b.is_an_array  return ArrayOp( sub, ArrayCst(b.sizes,a), b )
def sub( a, b ) when a.is_a_matrix and b.is_a_matrix  return MatOp( sub, a, b )
def sub( a, b ) when a.is_a_matrix  return MatOp( sub, a, MatCst(a.sizes,b) )
def sub( a, b ) when b.is_a_matrix  return MatOp( sub, MatCst(b.sizes,a), b )
def sub( a, b ) when __is_a_Property__(a)  pertinence 9  toto := a; return sub( toto, b )
def sub( a, b ) when __is_a_Property__(b)  pertinence 8  toto := b; return sub( a, toto )
def sub( a, b ) when are_of_different_type(a,b) pertinence 0  return op_with_ret_using_type_promote( a, b, sub )

def mul( a, b ) when a.is_a_vector and b.is_a_vector  return VecOp( mul, a, b )
def mul( a, b ) when a.is_a_vector  return VecOp( mul, a, VecCst(a.size,b) )
def mul( a, b ) when b.is_a_vector  return VecOp( mul, VecCst(b.size,a), b )
def mul( a, b ) when a.is_an_array and b.is_an_array  return ArrayOp( mul, a, b )
def mul( a, b ) when a.is_an_array  return ArrayOp( mul, a, ArrayCst(a.sizes,b) )
def mul( a, b ) when b.is_an_array  return ArrayOp( mul, ArrayCst(b.sizes,a), b )
def mul( a, b ) when a.is_a_matrix and b.is_a_matrix  return MatOp( mul, a, b )
def mul( a, b ) when a.is_a_matrix  return MatOp( mul, a, MatCst(a.sizes,b) )
def mul( a, b ) when b.is_a_matrix  return MatOp( mul, MatCst(b.sizes,a), b )
def mul( a, b ) when __is_a_Property__(a)  pertinence 9  toto := a; return mul( toto, b )
def mul( a, b ) when __is_a_Property__(b)  pertinence 8  toto := b; return mul( a, toto )
def mul( a, b ) when are_of_different_type(a,b) pertinence 0  return op_with_ret_using_type_promote( a, b, mul )

def div( a, b ) when a.is_a_vector and b.is_a_vector  return VecOp( div, a, b )
def div( a, b ) when a.is_a_vector  return VecOp( div, a, VecCst(a.size,b) )
def div( a, b ) when b.is_a_vector  return VecOp( div, VecCst(b.size,a), b )
def div( a, b ) when a.is_an_array and b.is_an_array  return ArrayOp( div, a, b )
def div( a, b ) when a.is_an_array  return ArrayOp( div, a, ArrayCst(a.sizes,b) )
def div( a, b ) when b.is_an_array  return ArrayOp( div, ArrayCst(b.sizes,a), b )
def div( a, b ) when a.is_a_matrix and b.is_a_matrix  return MatOp( div, a, b )
def div( a, b ) when a.is_a_matrix  return MatOp( div, a, MatCst(a.sizes,b) )
def div( a, b ) when b.is_a_matrix  return MatOp( div, MatCst(b.sizes,a), b )
def div( a, b ) when __is_a_Property__(a)  pertinence 9  toto := a; return div( toto, b )
def div( a, b ) when __is_a_Property__(b)  pertinence 8  toto := b; return div( a, toto )
def div( a, b ) when are_of_different_type(a,b) pertinence 0  return op_with_ret_using_type_promote( a, b, div )

def div_int( a, b ) when a.is_a_vector and b.is_a_vector  return VecOp( div_int, a, b )
def div_int( a, b ) when a.is_a_vector  return VecOp( div_int, a, VecCst(a.size,b) )
def div_int( a, b ) when b.is_a_vector  return VecOp( div_int, VecCst(b.size,a), b )
def div_int( a, b ) when a.is_an_array and b.is_an_array  return ArrayOp( div_int, a, b )
def div_int( a, b ) when a.is_an_array  return ArrayOp( div_int, a, ArrayCst(a.sizes,b) )
def div_int( a, b ) when b.is_an_array  return ArrayOp( div_int, ArrayCst(b.sizes,a), b )
def div_int( a, b ) when a.is_a_matrix and b.is_a_matrix  return MatOp( div_int, a, b )
def div_int( a, b ) when a.is_a_matrix  return MatOp( div_int, a, MatCst(a.sizes,b) )
def div_int( a, b ) when b.is_a_matrix  return MatOp( div_int, MatCst(b.sizes,a), b )
def div_int( a, b ) when __is_a_Property__(a)  pertinence 9  toto := a; return div_int( toto, b )
def div_int( a, b ) when __is_a_Property__(b)  pertinence 8  toto := b; return div_int( a, toto )
def div_int( a, b ) when are_of_different_type(a,b) pertinence 0  return op_with_ret_using_type_promote( a, b, div_int )

def mod( a, b ) when a.is_a_vector and b.is_a_vector  return VecOp( mod, a, b )
def mod( a, b ) when a.is_a_vector  return VecOp( mod, a, VecCst(a.size,b) )
def mod( a, b ) when b.is_a_vector  return VecOp( mod, VecCst(b.size,a), b )
def mod( a, b ) when a.is_an_array and b.is_an_array  return ArrayOp( mod, a, b )
def mod( a, b ) when a.is_an_array  return ArrayOp( mod, a, ArrayCst(a.sizes,b) )
def mod( a, b ) when b.is_an_array  return ArrayOp( mod, ArrayCst(b.sizes,a), b )
def mod( a, b ) when a.is_a_matrix and b.is_a_matrix  return MatOp( mod, a, b )
def mod( a, b ) when a.is_a_matrix  return MatOp( mod, a, MatCst(a.sizes,b) )
def mod( a, b ) when b.is_a_matrix  return MatOp( mod, MatCst(b.sizes,a), b )
def mod( a, b ) when __is_a_Property__(a)  pertinence 9  toto := a; return mod( toto, b )
def mod( a, b ) when __is_a_Property__(b)  pertinence 8  toto := b; return mod( a, toto )
def mod( a, b ) when are_of_different_type(a,b) pertinence 0  return op_with_ret_using_type_promote( a, b, mod )

def pow( a, b ) when a.is_a_vector and b.is_a_vector  return VecOp( pow, a, b )
def pow( a, b ) when a.is_a_vector  return VecOp( pow, a, VecCst(a.size,b) )
def pow( a, b ) when b.is_a_vector  return VecOp( pow, VecCst(b.size,a), b )
def pow( a, b ) when a.is_an_array and b.is_an_array  return ArrayOp( pow, a, b )
def pow( a, b ) when a.is_an_array  return ArrayOp( pow, a, ArrayCst(a.sizes,b) )
def pow( a, b ) when b.is_an_array  return ArrayOp( pow, ArrayCst(b.sizes,a), b )
def pow( a, b ) when a.is_a_matrix and b.is_a_matrix  return MatOp( pow, a, b )
def pow( a, b ) when a.is_a_matrix  return MatOp( pow, a, MatCst(a.sizes,b) )
def pow( a, b ) when b.is_a_matrix  return MatOp( pow, MatCst(b.sizes,a), b )
def pow( a, b ) when __is_a_Property__(a)  pertinence 9  toto := a; return pow( toto, b )
def pow( a, b ) when __is_a_Property__(b)  pertinence 8  toto := b; return pow( a, toto )
def pow( a, b ) when are_of_different_type(a,b) pertinence 0  return op_with_ret_using_type_promote( a, b, pow )

def not_equal( a, b ) when a.is_a_vector and b.is_a_vector  return VecOp( not_equal, a, b )
def not_equal( a, b ) when a.is_a_vector  return VecOp( not_equal, a, VecCst(a.size,b) )
def not_equal( a, b ) when b.is_a_vector  return VecOp( not_equal, VecCst(b.size,a), b )
def not_equal( a, b ) when a.is_an_array and b.is_an_array  return ArrayOp( not_equal, a, b )
def not_equal( a, b ) when a.is_an_array  return ArrayOp( not_equal, a, ArrayCst(a.sizes,b) )
def not_equal( a, b ) when b.is_an_array  return ArrayOp( not_equal, ArrayCst(b.sizes,a), b )
def not_equal( a, b ) when a.is_a_matrix and b.is_a_matrix  return MatOp( not_equal, a, b )
def not_equal( a, b ) when a.is_a_matrix  return MatOp( not_equal, a, MatCst(a.sizes,b) )
def not_equal( a, b ) when b.is_a_matrix  return MatOp( not_equal, MatCst(b.sizes,a), b )
def not_equal( a, b ) when __is_a_Property__(a)  pertinence 9  toto := a; return not_equal( toto, b )
def not_equal( a, b ) when __is_a_Property__(b)  pertinence 8  toto := b; return not_equal( a, toto )
def not_equal( a, b ) when are_of_different_type(a,b) pertinence 0  return op_with_ret_using_type_promote( a, b, not_equal )

def equal( a, b ) when a.is_a_vector and b.is_a_vector  return VecOp( equal, a, b )
def equal( a, b ) when a.is_a_vector  return VecOp( equal, a, VecCst(a.size,b) )
def equal( a, b ) when b.is_a_vector  return VecOp( equal, VecCst(b.size,a), b )
def equal( a, b ) when a.is_an_array and b.is_an_array  return ArrayOp( equal, a, b )
def equal( a, b ) when a.is_an_array  return ArrayOp( equal, a, ArrayCst(a.sizes,b) )
def equal( a, b ) when b.is_an_array  return ArrayOp( equal, ArrayCst(b.sizes,a), b )
def equal( a, b ) when a.is_a_matrix and b.is_a_matrix  return MatOp( equal, a, b )
def equal( a, b ) when a.is_a_matrix  return MatOp( equal, a, MatCst(a.sizes,b) )
def equal( a, b ) when b.is_a_matrix  return MatOp( equal, MatCst(b.sizes,a), b )
def equal( a, b ) when __is_a_Property__(a)  pertinence 9  toto := a; return equal( toto, b )
def equal( a, b ) when __is_a_Property__(b)  pertinence 8  toto := b; return equal( a, toto )
def equal( a, b ) when are_of_different_type(a,b) pertinence 0  return op_with_ret_using_type_promote( a, b, equal )

def inferior( a, b ) when a.is_a_vector and b.is_a_vector  return VecOp( inferior, a, b )
def inferior( a, b ) when a.is_a_vector  return VecOp( inferior, a, VecCst(a.size,b) )
def inferior( a, b ) when b.is_a_vector  return VecOp( inferior, VecCst(b.size,a), b )
def inferior( a, b ) when a.is_an_array and b.is_an_array  return ArrayOp( inferior, a, b )
def inferior( a, b ) when a.is_an_array  return ArrayOp( inferior, a, ArrayCst(a.sizes,b) )
def inferior( a, b ) when b.is_an_array  return ArrayOp( inferior, ArrayCst(b.sizes,a), b )
def inferior( a, b ) when a.is_a_matrix and b.is_a_matrix  return MatOp( inferior, a, b )
def inferior( a, b ) when a.is_a_matrix  return MatOp( inferior, a, MatCst(a.sizes,b) )
def inferior( a, b ) when b.is_a_matrix  return MatOp( inferior, MatCst(b.sizes,a), b )
def inferior( a, b ) when __is_a_Property__(a)  pertinence 9  toto := a; return inferior( toto, b )
def inferior( a, b ) when __is_a_Property__(b)  pertinence 8  toto := b; return inferior( a, toto )
def inferior( a, b ) when are_of_different_type(a,b) pertinence 0  return op_with_ret_using_type_promote( a, b, inferior )

def inferior_equal( a, b ) when a.is_a_vector and b.is_a_vector  return VecOp( inferior_equal, a, b )
def inferior_equal( a, b ) when a.is_a_vector  return VecOp( inferior_equal, a, VecCst(a.size,b) )
def inferior_equal( a, b ) when b.is_a_vector  return VecOp( inferior_equal, VecCst(b.size,a), b )
def inferior_equal( a, b ) when a.is_an_array and b.is_an_array  return ArrayOp( inferior_equal, a, b )
def inferior_equal( a, b ) when a.is_an_array  return ArrayOp( inferior_equal, a, ArrayCst(a.sizes,b) )
def inferior_equal( a, b ) when b.is_an_array  return ArrayOp( inferior_equal, ArrayCst(b.sizes,a), b )
def inferior_equal( a, b ) when a.is_a_matrix and b.is_a_matrix  return MatOp( inferior_equal, a, b )
def inferior_equal( a, b ) when a.is_a_matrix  return MatOp( inferior_equal, a, MatCst(a.sizes,b) )
def inferior_equal( a, b ) when b.is_a_matrix  return MatOp( inferior_equal, MatCst(b.sizes,a), b )
def inferior_equal( a, b ) when __is_a_Property__(a)  pertinence 9  toto := a; return inferior_equal( toto, b )
def inferior_equal( a, b ) when __is_a_Property__(b)  pertinence 8  toto := b; return inferior_equal( a, toto )
def inferior_equal( a, b ) when are_of_different_type(a,b) pertinence 0  return op_with_ret_using_type_promote( a, b, inferior_equal )

def superior( a, b ) when a.is_a_vector and b.is_a_vector  return VecOp( superior, a, b )
def superior( a, b ) when a.is_a_vector  return VecOp( superior, a, VecCst(a.size,b) )
def superior( a, b ) when b.is_a_vector  return VecOp( superior, VecCst(b.size,a), b )
def superior( a, b ) when a.is_an_array and b.is_an_array  return ArrayOp( superior, a, b )
def superior( a, b ) when a.is_an_array  return ArrayOp( superior, a, ArrayCst(a.sizes,b) )
def superior( a, b ) when b.is_an_array  return ArrayOp( superior, ArrayCst(b.sizes,a), b )
def superior( a, b ) when a.is_a_matrix and b.is_a_matrix  return MatOp( superior, a, b )
def superior( a, b ) when a.is_a_matrix  return MatOp( superior, a, MatCst(a.sizes,b) )
def superior( a, b ) when b.is_a_matrix  return MatOp( superior, MatCst(b.sizes,a), b )
def superior( a, b ) when __is_a_Property__(a)  pertinence 9  toto := a; return superior( toto, b )
def superior( a, b ) when __is_a_Property__(b)  pertinence 8  toto := b; return superior( a, toto )
def superior( a, b ) when are_of_different_type(a,b) pertinence 0  return op_with_ret_using_type_promote( a, b, superior )

def superior_equal( a, b ) when a.is_a_vector and b.is_a_vector  return VecOp( superior_equal, a, b )
def superior_equal( a, b ) when a.is_a_vector  return VecOp( superior_equal, a, VecCst(a.size,b) )
def superior_equal( a, b ) when b.is_a_vector  return VecOp( superior_equal, VecCst(b.size,a), b )
def superior_equal( a, b ) when a.is_an_array and b.is_an_array  return ArrayOp( superior_equal, a, b )
def superior_equal( a, b ) when a.is_an_array  return ArrayOp( superior_equal, a, ArrayCst(a.sizes,b) )
def superior_equal( a, b ) when b.is_an_array  return ArrayOp( superior_equal, ArrayCst(b.sizes,a), b )
def superior_equal( a, b ) when a.is_a_matrix and b.is_a_matrix  return MatOp( superior_equal, a, b )
def superior_equal( a, b ) when a.is_a_matrix  return MatOp( superior_equal, a, MatCst(a.sizes,b) )
def superior_equal( a, b ) when b.is_a_matrix  return MatOp( superior_equal, MatCst(b.sizes,a), b )
def superior_equal( a, b ) when __is_a_Property__(a)  pertinence 9  toto := a; return superior_equal( toto, b )
def superior_equal( a, b ) when __is_a_Property__(b)  pertinence 8  toto := b; return superior_equal( a, toto )
def superior_equal( a, b ) when are_of_different_type(a,b) pertinence 0  return op_with_ret_using_type_promote( a, b, superior_equal )

